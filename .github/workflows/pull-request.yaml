name: PR Checks

on:
  workflow_dispatch: {}
  pull_request: {}


permissions:
  contents: read

# When a new revision is pushed to a PR, cancel all in-progress CI runs for that
# PR. See https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true


jobs:
  docs-updates-needed:
    name: Docs Update Check
    runs-on: ubuntu-latest
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@v1

      - uses: actions/checkout@v5

      - name: Patch Speakeasy README docs links
        run: ./scripts/patch-readme.sh README.md http://localhost:8000

      - name: Check for any unpatched docs links
        run: ./scripts/find-unpatched-links.sh README.md

  release-check:
    name: Release version bump check
    runs-on: ubuntu-latest
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@v1

      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch full history to access all commits

      - name: Check for release commits
        id: check-release
        run: |
          RESULT=$(./scripts/is-release.sh "origin/${{ github.base_ref }}" "origin/${{ github.head_ref }}")
          echo "Release commits detected: $RESULT"
          echo "result=$RESULT" >> $GITHUB_OUTPUT

      - name: Post or update warning comment (release commit detected)
        if: steps.check-release.outputs.result == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          MARKER: "<!-- release-commit-warning -->"
        run: |
          COMMENT_BODY="$(cat ./scripts/templates/release-detected.md)"

          echo "Posting or updating release warning comment."
          ./scripts/release-pr-comment.sh "$REPO" "$PR_NUMBER" "$MARKER"

      - name: Update warning comment if present (no release commit)
        if: steps.check-release.outputs.result != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          MARKER: "<!-- release-commit-warning -->"
          COMMENT_BODY: |
            ℹ️ A release commit was detected in earlier versions of this PR.

            The current PR commits do not appear to be a release.
        run: |
          EXISTING_COMMENT=$(gh api repos/$REPO/issues/$PR_NUMBER/comments \
              --jq ".[] | select(.body | contains(\"$MARKER\")) | .id" | head -1) || {
              echo "Error: Failed to fetch existing comments" >&2
              exit 2
          }

          if [ -n "$EXISTING_COMMENT" ]; then
            echo "Updating release warning comment."
            ./scripts/release-pr-comment.sh "$REPO" "$PR_NUMBER" "$MARKER"
          else
            echo "No release warning comment found."
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@v1

      - uses: actions/checkout@v5

      - name: Setup dotnet
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: "8.0.x"

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build

  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    steps:
      - name: Tune GitHub-hosted runner network
        uses: smorimoto/tune-github-hosted-runner-network@v1

      - uses: actions/checkout@v5

      - name: Setup dotnet
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: "8.0.x"

      - name: Install dependencies
        run: dotnet restore

      - name: Test
        run: dotnet test
        env:
          EOPA_LICENSE_TOKEN: ${{ secrets.EOPA_LICENSE_TOKEN }}
        timeout-minutes: 5
